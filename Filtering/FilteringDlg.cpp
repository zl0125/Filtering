
// FilteringDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "Filtering.h"
#include "FilteringDlg.h"
#include "afxdialogex.h"
#include "F_Select.h"

CString infilename;

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CFilteringDlg 对话框



CFilteringDlg::CFilteringDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_FILTERING_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CFilteringDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_inputimg, m_inputimg);
	DDX_Control(pDX, IDC_outimg, m_outimg);
}

BEGIN_MESSAGE_MAP(CFilteringDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_input, &CFilteringDlg::OnBnClickedinput)
	ON_BN_CLICKED(IDC_output, &CFilteringDlg::OnBnClickedoutput)
END_MESSAGE_MAP()


// CFilteringDlg 消息处理程序

BOOL CFilteringDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CFilteringDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CFilteringDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CFilteringDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void CFilteringDlg::OnBnClickedinput()
{

	CFileDialog fileDlg(TRUE, _T("png"), NULL, 0, _T("image Files(*.bmp;*.jpg;*.png)|*.JPG;*.PNG;*.BMP|All Files (*.*) |*.*|"), this);
	fileDlg.DoModal();
	CString path = fileDlg.GetPathName();
	CImage image;
	image.Load(path);
	infilename = path;
	if (path.IsEmpty()) {
		return; // 如果path为空，则不执行任何代码并返回
	}
	CRect rectControl;
	m_inputimg.GetClientRect(rectControl);

	CDC* pDc = m_inputimg.GetDC();
	rectControl = CRect(rectControl.TopLeft(), CSize(rectControl.Width(), rectControl.Height()));
	m_inputimg.SetBitmap(NULL);

	image.Draw(pDc->m_hDC, rectControl);

	m_inputimg.ReleaseDC(pDc);
}




void CFilteringDlg::OnBnClickedoutput()
{
	if (infilename.IsEmpty()) {
		int result = MessageBox(TEXT("请导入图片"), TEXT("提示"), MB_OK);
		return; // 如果m_strTmpFile0为空，则不执行任何代码并返回
	}
	F_Select safAS;
	safAS.DoModal();
	CString Cqtttm_strTmpFile = m_strTmpFile0;
	if (m_strTmpFile0.IsEmpty()) {
		return; // 如果m_strTmpFile0为空，则不执行任何代码并返回
	}
	CImage image;
	image.Load(Cqtttm_strTmpFile);
	CRect rectControl;
	m_outimg.GetClientRect(rectControl); // 控件矩形对象
	CDC* pDc = m_outimg.GetDC(); // 设备上下文对象的类
	rectControl = CRect(rectControl.TopLeft(), CSize((int)rectControl.Width(), (int)rectControl.Height()));
	m_outimg.SetBitmap(NULL); // 清空picture
	image.Draw(pDc->m_hDC, rectControl);
	m_outimg.ReleaseDC(pDc);
	// TODO: 在此添加控件通知处理程序代码
}
